#   ${hostname}-${replicaId}.${serviceName}.${namespace}.svc.${clusterDomain}
#
apiVersion: apps/v1
#
# HELPER VARIABLE DEFINITIONS
{{-  $emsParams := include "need.msg.ems.params" . | fromYaml -}}
{{-  $emsNeedsVct := "no" -}}
{{- if ne "ftl" $emsParams.ems.stores -}}
  {{- fail "Unsupported Store type" -}}
{{- end -}}
{{- $stsname := printf "%s-ops" $emsParams.ems.name -}}
{{- $svcname := printf "%s-%s" $emsParams.ems.name "ems" -}}
{{- $svcFtl := printf "%s-%s" $emsParams.ems.name "ftl" -}}
{{- $svcFtlHost := printf "%s.%s.svc" $svcFtl .Release.Namespace -}}
{{- $svcEms := printf "%s-%s" $emsParams.ems.name "ems" -}}
{{- $svcEmsHost := printf "%s.%s.svc" $svcEms .Release.Namespace -}}
{{- $dataPvc := $emsParams.ems.logs.storageName -}}
#
kind: StatefulSet
metadata:
    name: "{{ $stsname }}"
    namespace: "{{ .Release.Namespace }}"
    labels:
      {{ include "msg.dp.labels" . | indent 6 }}
      name: "{{ $stsname }}"
      app: msg-ems-ftl
      tib-dp-name: "{{ $emsParams.dp.name }}"
      tib-dp-app: msg-ems-ftl
      tib-dp-release: "{{ $emsParams.ems.name }}"
      tib-msg-stsname: "{{ $stsname }}"
      tib-msg-ems-name: "{{ $emsParams.ems.name }}"
      tib-msg-ems-sizing: "{{ $emsParams.ems.sizing }}"
      tib-msg-ems-use: "{{ $emsParams.ems.use }}"
    annotations:
      {{ include "msg.dp.mon.annotations" . | indent 6 }}
spec:
    podManagementPolicy: Parallel
    replicas: 1
    selector:
        matchLabels:
          tib-msg-stsname: "{{ $stsname }}"
          tib-dp-release: "{{ .Release.Name }}"
    serviceName: "{{ $stsname }}"
    template:
        metadata:
            labels:
                tib-dp-name: "{{ $emsParams.dp.name }}"
                {{ include "msg.dp.labels" . | indent 16 }}
                tib-msg-stsname: "{{ $stsname }}"
                component: ems-ops
                app: msg-ems-ftl
                tib-msg-ems-name: "{{ $emsParams.ems.name }}"
                tib-msg-ems-sizing: "{{ $emsParams.ems.sizing }}"
                tib-msg-ems-use: "{{ $emsParams.ems.use }}"
            name: ems-ops
            annotations:
              cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        spec:
            {{- if ne "none" $emsParams.dp.pullSecret }}
            imagePullSecrets:
            - name: {{ $emsParams.dp.pullSecret }}
            {{- end }}
            # NOTE: if hostname/subdomain do not agree with podname/service
            # .. DNS pod resolution problems can occur
            hostname: "{{ $stsname }}"
            enableServiceLinks: false
            subdomain: "{{ $stsname }}"
            nodeSelector:
              kubernetes.io/os: linux
            containers:
            - name: "{{ $stsname }}"
              image: "{{ $emsParams.ops.image }}"
              imagePullPolicy: "{{ $emsParams.dp.pullPolicy }}"
              resources:
                requests:
                  memory: "0.5Gi"
                  cpu: "0.1"
                limits:
                  memory: "8Gi"
                  cpu: "4"
              # exec /usr/local/watchdog/bin/wait-for-shutdown.sh  ; 
              command: ['bash', '-c' ]
              args:
              - >
                ( mkdir -p /logs/$MY_POD_NAME/boot ; cd /logs/$MY_POD_NAME/boot ;
                    for x in /boot/mk-*.sh ; do bash < $x ; done | tee boot.out ) ;
                exec wait-for-shutdown.sh  ; 
              volumeMounts:
              - mountPath: /boot
                name: scripts-vol
              - mountPath: /logs
                name: "ems-log"
                  {{ if eq "sharedPvc" $emsParams.ems.logs.storageType }}
                subPathExpr: "$(MY_RELEASE)/logs"
                  {{ end }}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              env:
              {{ include "msg.envStdPodRefs" . | indent  14 }}
              - name: ACCEPT_EUA
                value: "y"
              - name: GOTRACEBACK
                value: "crash"
              - name: TCM_WATCHDOG_TYPE
                value: candidate
              - name: TCM_WATCHDOG_LOG_FILE
                value: /logs/$(MY_POD_NAME)/watchdog.log
              - name: MY_RELEASE
                value: "{{ .Release.Name }}"
              - name: REALM_PORT
                value: "{{ $emsParams.ems.ports.realmPort }}"
              - name: EMS_TCP_PORT
                value: "{{ $emsParams.ems.ports.tcpPort }}"
              - name: EMS_INIT_JSON
                value: "/logs/$(MY_POD_NAME)/boot/tibemsd-ftl.json"
              - name: EMS_HTTP_PORT
                value: "{{ $emsParams.ems.ports.httpPort }}"
              - name: MY_SVC_NAME
                value: "{{ $stsname }}"
              - name: MY_SVC_HOST
                value: "$(MY_POD_NAME).{{ $stsname }}.{{ .Release.Namespace }}.svc"
              - name: FTL_REALM_URL
                # the service load-balanced REALM URL
                value: "http://{{ $svcFtlHost }}:$(REALM_PORT)"
              - name: EMS_TCP_URL
                # the service load-balanced EMS TCP URL
                value: "tcp://{{ $svcEmsHost }}:$(EMS_TCP_PORT),tcp://{{ $svcEmsHost }}:$(EMS_TCP_PORT)"
              - name: EMS_SSL_URL
                # the service load-balanced EMS SSL URL
                value: "ssl://{{ $svcEmsHost }}:$(EMS_SSL_PORT),ssl://{{ $svcEmsHost }}:$(EMS_SSL_PORT)"
              - name: TCM_WATCHDOG_CONFIG
                value: "/logs/$(MY_POD_NAME)/boot/watchdog.yml"
              - name: TCM_WD_PORT
                value: "{{ $emsParams.ems.ports.watchdogPort }}"
              - name: TCM_WATCHDOG_HOSTPORT
                value: "$(MY_POD_NAME):$(TCM_WD_PORT)"
              #- name: TIB_RS_CURL_VERBOSE
              #  value: "1"
            volumes:
            - name: scripts-vol
              configMap:
                name: "{{ $emsParams.ems.name }}-scripts"
            - name: "ems-log"
            {{ if eq "sharedPvc" $emsParams.ems.logs.storageType }}
              persistentVolumeClaim:
                claimName: "{{ $emsParams.ems.logs.storageName }}"
            {{ else }}
              emptyDir: {}
            {{ end }}
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext:
              # user=emsaqa, group=msgsrc
              runAsUser: {{ int $emsParams.dp.uid }}
              runAsGroup: {{ int $emsParams.dp.gid }}
              fsGroup: {{ int $emsParams.dp.gid }}
            # The service account allows access to helm/kubectl actions
            serviceAccountName: "{{ $emsParams.serviceAccount }}"
            terminationGracePeriodSeconds: 10
    updateStrategy:
        # type: OnDelete
...
