apiVersion: apps/v1
kind: Deployment
metadata:
  name: tp-tibtunnel
  labels:
    {{- include "tp-tibtunnel.shared.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "tp-tibtunnel.shared.labels.selector" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "tp-tibtunnel.shared.labels.standard" . | nindent 8 }}
    spec:
      containers:
      - name: tibtunnel
        image: {{ if .Values.image.registry}}{{ .Values.image.registry }}{{else}}{{ .Values.global.dockerRegistry }}{{end}}{{ .Values.image.repository }}:{{ include "tp-tibtunnel.generated.buildNumber" . }}
        command: ["/bin/sh","-c"]
        args:
        - |
          set -e;
          echo "configuring tibtunnel";
          {{- $profile := printf "%s%s" (ternary "--profile " "" (ne .Values.configure.profile "")) .Values.configure.profile  -}}
          {{- $tibcoDataPlaneId := printf "%s%s" (ternary "--tibcoDataPlaneId " "" (ne .Values.global.tibcoDataPlaneId "")) .Values.global.tibcoDataPlaneId -}}
          {{-  $accessKey := printf "%s%s" (ternary "-a " "" (ne .Values.configure.accessKey "")) .Values.configure.accessKey }}
          echo "executing 'tp-tibtunnel configure {{ $profile }} {{ $tibcoDataPlaneId }} {{ $accessKey }} '";
          tp-tibtunnel configure {{ $profile }} {{ $tibcoDataPlaneId }} {{ $accessKey }} ;
          
          {{- $debug := ternary "-d" "" .Values.connect.debug  -}}
          {{- $payload := ternary "--payload" "" .Values.connect.payload -}}
          {{- $dataChunkSize := printf "%s%s" (ternary "--data-chunk-size " "" ( ne (.Values.connect.dataChunkSize| toString ) "")) (.Values.connect.dataChunkSize|toString) -}}
          {{- $dataAckMode := printf "%s%t" "--data-ack-mode=" .Values.connect.dataAckMode -}}
          {{- $remoteDebug := ternary "--remote-debug" "" .Values.connect.remoteDebug -}}
          {{- $logFile := printf "%s%s" (ternary "--log-file " "" (ne .Values.connect.logFile "")) .Values.connect.logFile }}
          {{- $networkCheckUrl := printf "%s%s" (ternary "--network-check-url " "" (ne .Values.connect.networkCheckUrl "")) .Values.connect.networkCheckUrl }}
          {{- $infiniteRetries := ternary "--infinite-retries" "" .Values.connect.infiniteRetries -}}
          echo "executing 'tp-tibtunnel connect {{ $debug }} {{ $payload }}  {{ $dataChunkSize }} {{ $dataAckMode }} {{ $remoteDebug }}  {{ $logFile }} {{ $profile }} {{ $networkCheckUrl }} {{ $infiniteRetries }} -s {{tpl .Values.connect.onPremHost .}}:{{ .Values.connect.onPremPort }} {{ .Values.connect.url }}'";
          tp-tibtunnel connect {{ $debug }} {{ $payload }} {{ $dataChunkSize }} {{ $dataAckMode }} {{ $remoteDebug }}  {{ $logFile }} {{ $profile }} {{ $networkCheckUrl }} {{ $infiniteRetries }} -s {{ tpl .Values.connect.onPremHost .}}:{{.Values.connect.onPremPort}} {{ .Values.connect.url }};
          echo "exited";
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10}}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}