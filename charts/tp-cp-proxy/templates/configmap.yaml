apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tp-cp-proxy.consts.appName" . }}-client-credential-secret-scripts
  labels:
    {{- include "tp-cp-proxy.shared.labels.standard" . | nindent 4 }}
data:
  clientCredentialCreation.sh: |
    #!/bin/bash
    set +x
    set -o pipefail

    secret_name={{ include "tp-cp-proxy.consts.outputSecretName" .}}
    namespace={{ .Release.Namespace }}
    initial_access_token={{ .Values.clientCredentials.initialAccessToken}}
    server_dns={{ .Values.global.cp.controlPlaneUrl }}
    api_path="/register/token"

    #check if I can create/delete secrets and return early before creating client credentials.
    if [[ `kubectl auth can-i create secrets -n ${namespace}` != "yes" ]];then
      echo "[error] insufficient privilege. cannot create secret" && exit 1
    fi
    if [[ `kubectl auth can-i delete secrets -n ${namespace}` != "yes" ]];then
      echo "[error] insufficient privilege. cannot delete secret" && exit 1
    fi

    echo "[info] initiating client credentials"
    echo "[info] starting ${method} ${server_dns}/${api_path}"
{{/*    response=$(curl -s -w "\n%{http_code}\n" -X GET \*/}}
{{/*    ${server_dns}/${api_path} \*/}}
{{/*    -H 'cache-control: no-cache' \*/}}
{{/*    -H 'initial-access-token: ${initial_access_token}')*/}}
{{/*    http_code=$(echo ${response} | rev | cut -d ' ' -f1 | rev )*/}}
{{/*    if [[ "${http_code}" != "200" ]]; then*/}}
{{/*      echo "[error] failed to retrieve client credential"*/}}
{{/*      echo "[error] http code: ${http_code}, ${response}"*/}}
{{/*    exit 1*/}}
{{/*    else*/}}
{{/*      echo "[info] successfully got client crendentials"*/}}
{{/*    fi*/}}
    {{/* TODO: once we have IDM API, uncomment above code */}}
    response="test"

    if [[ `kubectl get secret ${secret_name} -n ${namespace} -o name 2>/dev/null` == "secret/${secret_name}"  ]]; then
      echo "[info] secret ${secret_name} already exists. deleting.."
      kubectl delete secret ${secret_name} -n ${namespace} 2>&1||true
    fi
    kubectl apply -f - <<EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: ${secret_name}
        namespace: ${namespace}
        labels:
         {{- include "tp-cp-proxy.shared.labels.standard" . | nindent 10 }}
      type: Opaque
      data:
        clientCredentials: $(echo ${response}| base64 -w0)
    EOF

  clientCredentialDeletion.sh: |
    #!/bin/bash
    set +x

    secret_name={{ include "tp-cp-proxy.consts.outputSecretName" .}}
    namespace={{ .Release.Namespace }}

    echo "[info] deleting secret ${namespace}/${secret_name}"
    kubectl delete secret ${secret_name} -n ${namespace} || true